// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentJobs.Models;

#nullable disable

namespace StudentJobs.Migrations
{
    [DbContext(typeof(StudentJobsContext))]
    [Migration("20240528091716_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentJobs.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<bool>("ApplicationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int?>("JobPostingId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("StudentJobs.Models.JobPosting", b =>
                {
                    b.Property<int>("JobPostingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobPostingId"));

                    b.Property<DateTime>("JobPostingCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JobPostingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobPostingDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("JobPostingImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("JobPostingStatus")
                        .HasColumnType("bit");

                    b.Property<string>("JobPostingTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JobPostingId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostings");
                });

            modelBuilder.Entity("StudentJobs.Models.Scoring", b =>
                {
                    b.Property<int>("ScoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoringId"));

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScoringCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScoringDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<bool>("ScoringStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ScoringTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScoringId");

                    b.HasIndex("UserId");

                    b.ToTable("Scorings");
                });

            modelBuilder.Entity("StudentJobs.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("SectorFullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SectorImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SectorStatus")
                        .HasColumnType("bit");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("StudentJobs.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UserBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCompanyAddress")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("UserCompanyName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UserCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UserTelephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("UserUpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentJobs.Models.Application", b =>
                {
                    b.HasOne("StudentJobs.Models.JobPosting", "JobPostings")
                        .WithMany("Applications")
                        .HasForeignKey("JobPostingId");

                    b.HasOne("StudentJobs.Models.User", "Users")
                        .WithMany("Applications")
                        .HasForeignKey("UserId");

                    b.Navigation("JobPostings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentJobs.Models.JobPosting", b =>
                {
                    b.HasOne("StudentJobs.Models.Sector", "Sectors")
                        .WithMany("JobPostings")
                        .HasForeignKey("SectorId");

                    b.HasOne("StudentJobs.Models.User", "Users")
                        .WithMany("JobPostings")
                        .HasForeignKey("UserId");

                    b.Navigation("Sectors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentJobs.Models.Scoring", b =>
                {
                    b.HasOne("StudentJobs.Models.User", "Users")
                        .WithMany("Scorings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentJobs.Models.JobPosting", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("StudentJobs.Models.Sector", b =>
                {
                    b.Navigation("JobPostings");
                });

            modelBuilder.Entity("StudentJobs.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("JobPostings");

                    b.Navigation("Scorings");
                });
#pragma warning restore 612, 618
        }
    }
}
